{"version":3,"sources":["modules/grammar-form/GrammarForm.js","modules/helpers/glc-gr-analyzer/GlcGrAnalyzer.js","modules/helpers/productions/Productions.js","modules/helpers/grammar/Grammar.js","utils.js","services/first.js","services/convertToNewFormat.js","modules/first/First.js","services/follow.js","modules/follow/Follow.js","services/tabular-predictive-table.js","modules/predictiveTable/PredictiveTable.js","services/verificador-sentenca.js","modules/verificador-sentenca/VerificadorSentenca2.js","App.js","serviceWorker.js","index.js"],"names":["FormItem","Form","Item","Option","Select","Search","Input","InputForm","state","nonTerminal","terminal","nonTerminalList","terminalList","productionsList","terminalsList","production","addNonTerminal","nt","undefined","_this","indexOf","setState","concat","Object","toConsumableArray","delNonTerminal","index","newList","splice","nonTerminalOnChange","e","preventDefault","value","target","test","charAt","length","toUpperCase","addTerminal","t","delTerminal","terminalOnChange","toLowerCase","terminalListOnChange","createNewProduction","props","handleProductionsChange","delProduction","setNonTerminalProduction","options","row","createNewTerminalProduction","push","onSentenceChange","indexTerminal","char","slice","containsNonTerminal","forEach","startsWith","delSentence","productions","terminalProductionOnChange","this","_this2","react_default","a","createElement","es_form","es_row","col","md","card","className","title","extra","react","prefix","icon","type","placeholder","enterButton","onChange","onSearch","map","tag","key","color","onClick","name","es_button","es_select","showSearch","optionFilterProp","onSelect","filterOption","input","option","children","indexNonterminal","style","fontSize","marginTop","Component","GrammarForm","create","GlcGrAnalyzer","analyze","isRegularGrammar","isContexFreeGrammar","_ref","textAlign","Productions","formatProductionList","productionStyle","marginLeft","Grammar","formatGrammar","allNonTerminals","allTerminals","split","terminalSplitted","Set","join","isTerminal","symbol","setTimeout","bind","getFirstsFromG","g","firsts","_loop","currFirsts","prod","first","_getFirst","counter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","Array","firstFlatten","_","flatten","uniq","newFormat","oldGrammar","terminalsListInput","nonTerminalListInput","newGrammar","console","log","loop","list","terminals","includes","First","formatFirst","all","newGramar","entries","_ref2","slicedToArray","id","JSON","stringify","follow","grammar","follows","resultado","sentencas","entrou","location","i","apply","filter","item","getFollowsFromG","getFollows","Follow","formatFollow","_initPredictiveTable","mapNonMatchedTerminals","getAllNonTerminalsFromG","predictiveTable","generateTabularPredictiveTable","arguments","_loop2","firstSymbol","PredictiveTable","columns","dataSource","updateState","formatPredictiveTable","property","_ret","followList","firstList","tabularPredictiveTable","dataIndex","linha","v","table","verificarSentenca","pilha","entrada","tabelaPreditivaTabular","tabelaFinal","saida","encontrouNaTabela","letraEntrada","shift","topoPilha","pop","naoTerminalTabela","letraTabela","_pilha","unshift","tabelaPreditivaTabularTmp","reverse","sentenca","tamanho","alert","escreverTabelafinal","testSentenceInPredictiveTableData","initSymbol","sentence","VerificadorSentenca2","handleChangeInitSymbol","event","handleChangeSentence","formatverificadorSentenca","App","background","padding","grammar_form_GrammarForm","GlcGrAnalyzer_GlcGrAnalyzer","Productions_Productions","Grammar_Grammar","First_First","Follow_Follow","PredictiveTable_PredictiveTable","VerificadorSentenca2_VerificadorSentenca2","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53c251e1.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { Button, Form, Icon, Input, Row, Col, Tag, Select, Card } from 'antd';\r\n\r\nimport './GrammarForm.css';\r\n\r\nconst FormItem = Form.Item;\r\nconst Option = Select.Option;\r\nconst { Search } = Input;\r\n\r\nclass InputForm extends Component {\r\n\r\n\r\n  // state = {\r\n  //   nonTerminal: '',\r\n  //   terminal: '',\r\n  //   nonTerminalList: ['S', 'A', 'B'],\r\n  //   terminalList: ['c', 'a', 'b', 'empty'],\r\n  //   productionsList: [\r\n  //     { nonTerminal: 'S', terminalsList: ['cAa'] },\r\n  //     { nonTerminal: 'A', terminalsList: ['cb'] },\r\n  //     { nonTerminal: 'A', terminalsList: ['B'] },\r\n  //     { nonTerminal: 'B', terminalsList: ['bcB'] },\r\n  //     { nonTerminal: 'B', terminalsList: ['empty'] },\r\n  //   ],\r\n  //   production: {\r\n  //     nonTerminal: '',\r\n  //     terminalsList: []\r\n  //   }\r\n  // };\r\n\r\n\r\n  state = {\r\n    nonTerminal: '',\r\n    terminal: '',\r\n    nonTerminalList: ['E', 'EL', 'T'],\r\n    terminalList: ['a', '+', '$', 'empty'],\r\n    productionsList: [\r\n      { nonTerminal: 'E', terminalsList: ['T','EL'] },\r\n      { nonTerminal: 'EL', terminalsList: ['+','T','EL'] },\r\n      { nonTerminal: 'EL', terminalsList: ['empty'] },\r\n      { nonTerminal: 'T', terminalsList: ['a'] },\r\n    ],\r\n    production: {\r\n      nonTerminal: '',\r\n      terminalsList: []\r\n    }\r\n  };\r\n\r\n  // state = {\r\n  //   nonTerminal: '',\r\n  //   terminal: '',\r\n  //   nonTerminalList: ['S', 'A', 'B'],\r\n  //   terminalList: ['a', 'b'],\r\n  //   productionsList: [{nonTerminal: 'S', terminalsList: ['abA']}, {nonTerminal: 'A', terminalsList: ['aA', 'bA', 'B']}, {nonTerminal: 'B', terminalsList: ['ba']}],\r\n  //   production: {\r\n  //     nonTerminal: '',\r\n  //     terminalsList: []\r\n  //   }\r\n  // };\r\n\r\n  componentDidMount() {\r\n    this.props.handleProductionsChange(this.state.productionsList, this.state.terminalList, this.state.nonTerminalList);\r\n  }\r\n\r\n  //NonTerminal\r\n  addNonTerminal = (nt) => {\r\n    if (nt !== undefined && nt !== null && nt !== '') {\r\n      let alreadyContains = this.state.nonTerminalList.indexOf(nt) > -1;\r\n      if (!alreadyContains) {\r\n        this.setState({\r\n          nonTerminalList: [...this.state.nonTerminalList, nt]\r\n        });\r\n      }\r\n    }\r\n    this.setState({\r\n      nonTerminal: ''\r\n    });\r\n  }\r\n\r\n  delNonTerminal = (index) => {\r\n    let newList = this.state.nonTerminalList;\r\n    let nt = newList.splice(index, 1);\r\n    this.setState({\r\n      nonTerminalList: newList,\r\n      nonTerminal: nt\r\n    });\r\n  }\r\n\r\n  nonTerminalOnChange = (e) => {\r\n    e.preventDefault();\r\n    let value = e.target.value;\r\n    if (!/[^a-zA-Z]/.test(value)) {\r\n      this.setState({\r\n        nonTerminal: value.charAt(value.length - 1).toUpperCase()\r\n      });\r\n    }\r\n  }\r\n\r\n  //Terminal\r\n  addTerminal = (t) => {\r\n    if (t !== undefined && t !== null && t !== '') {\r\n      let alreadyContains = this.state.terminalList.indexOf(t) > -1;\r\n      if (!alreadyContains) {\r\n        this.setState({\r\n          terminalList: [...this.state.terminalList, t]\r\n        });\r\n      }\r\n    }\r\n    this.setState({\r\n      terminal: ''\r\n    });\r\n  }\r\n\r\n  delTerminal = (index) => {\r\n    let newList = this.state.terminalList;\r\n    let t = newList.splice(index, 1);\r\n    this.setState({\r\n      terminalList: newList,\r\n      terminal: t\r\n    });\r\n  }\r\n\r\n  terminalOnChange = (e) => {\r\n    e.preventDefault();\r\n    let value = e.target.value;\r\n    if (!/[A-Z]/.test(value)) {\r\n      this.setState({\r\n        terminal: value.charAt(value.length - 1).toLowerCase()\r\n      });\r\n    }\r\n  }\r\n\r\n  terminalListOnChange = (e) => {\r\n    e.preventDefault();\r\n    let value = e.target.value;\r\n    if (!/[A-Z]/.test(value)) {\r\n      this.setState({\r\n        nonTerminal: value.charAt(value.length - 1).toUpperCase()\r\n      });\r\n    }\r\n  }\r\n\r\n  createNewProduction = () => {\r\n    this.setState({\r\n      productionsList: [...this.state.productionsList, { terminalsList: [] }]\r\n    })\r\n\r\n    this.props.handleProductionsChange(this.state.productionsList, this.state.terminalList, this.state.nonTerminalList);\r\n  }\r\n\r\n  delProduction = (index) => {\r\n    let productionsList = this.state.productionsList;\r\n    productionsList.splice(index, 1);\r\n\r\n    this.setState({\r\n      productionsList: productionsList\r\n    });\r\n  }\r\n\r\n  setNonTerminalProduction = (value, options) => {\r\n    let row = options.props.row;\r\n    let productionsList = this.state.productionsList;\r\n    productionsList[row].nonTerminal = value;\r\n    this.setState({\r\n      productionsList: productionsList\r\n    });\r\n\r\n    this.props.handleProductionsChange(this.state.productionsList, this.state.terminalList, this.state.nonTerminalList);\r\n  }\r\n\r\n  createNewTerminalProduction = (index) => {\r\n    let productionsList = this.state.productionsList;\r\n\r\n    productionsList[index].terminalsList.push('');\r\n    this.setState({\r\n      productionsList: productionsList\r\n    });\r\n\r\n    this.props.handleProductionsChange(this.state.productionsList, this.state.terminalList, this.state.nonTerminalList);\r\n  }\r\n\r\n\r\n\r\n  onSentenceChange = (e, index, indexTerminal) => {\r\n    let value = e.target.value;\r\n    let char = value.slice(-1);\r\n\r\n    // let containsTerminal = this.state.terminalList.indexOf(char) > -1;\r\n    let containsNonTerminal = this.state.nonTerminalList.indexOf(char) > -1;\r\n    let containsTerminal = false;\r\n    this.state.terminalList.forEach((terminal) => {\r\n      if (terminal.startsWith(value)) {\r\n        containsNonTerminal = true;\r\n      }\r\n    });\r\n\r\n\r\n\r\n    if ((/[^$|^A-Z^a-z]/.test(value) || /[!\"#$%&'()*+.\\/:;<=>?@\\[\\\\\\]^_`{|}~-]?$/.test(value)) && (containsTerminal || containsNonTerminal || value === '')) {\r\n      let productionsList = this.state.productionsList;\r\n      productionsList[index].terminalsList[indexTerminal] = value;\r\n\r\n      this.setState({\r\n        productionsList: productionsList\r\n      });\r\n    }\r\n\r\n    this.props.handleProductionsChange(this.state.productionsList, this.state.terminalList, this.state.nonTerminalList);\r\n  }\r\n\r\n  delSentence = (index, indexTerminal) => {\r\n    let productions = this.state.productionsList;\r\n    let terminalsList = productions[index].terminalsList;\r\n    terminalsList.splice(indexTerminal, 1);\r\n\r\n    this.setState({\r\n      productionsList: productions\r\n    });\r\n\r\n    this.props.handleProductionsChange(this.state.productionsList, this.state.terminalList, this.state.nonTerminalList);\r\n  }\r\n\r\n  terminalProductionOnChange = (e) => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form>\r\n        <FormItem>\r\n          <Row>\r\n            <Col md={12}>\r\n              <Card\r\n                className=\"text-left\"\r\n                title={<b>Non-terminals</b>}\r\n                extra={\r\n                  <Fragment>\r\n                    <Search\r\n                      prefix={<Icon type=\"tag-o\" />}\r\n                      placeholder=\"non-terminal\"\r\n                      enterButton=\"Add\"\r\n                      value={this.state.nonTerminal}\r\n                      onChange={this.nonTerminalOnChange}\r\n                      onSearch={this.addNonTerminal} />\r\n                  </Fragment>\r\n                }\r\n              >\r\n                <Row>\r\n                  <Col md={24} className=\"text-center\">\r\n                    {this.state.nonTerminalList.map((nt, index) =>\r\n                      <Tag\r\n                        key={index}\r\n                        color=\"red\"\r\n                        onClick={() => this.delNonTerminal(index)}\r\n                        name={index}>\r\n                        {nt}\r\n                      </Tag>)}\r\n                  </Col>\r\n                </Row>\r\n              </Card>\r\n            </Col>\r\n            <Col md={12}>\r\n              <Card\r\n                className=\"text-left\"\r\n                title={<b>Terminals</b>}\r\n                extra={\r\n                  <Fragment>\r\n                    <Search\r\n                      prefix={<Icon type=\"tag-o\" />}\r\n                      placeholder=\"terminal\"\r\n                      enterButton=\"Add\"\r\n                      value={this.state.terminal}\r\n                      onChange={this.terminalOnChange}\r\n                      onSearch={this.addTerminal} />\r\n                  </Fragment>\r\n                }\r\n              >\r\n                <Row>\r\n                  <Col md={24} className=\"text-center\">\r\n                    {this.state.terminalList.map((t, index) =>\r\n                      <Tag\r\n                        key={index}\r\n                        color=\"green\"\r\n                        onClick={() => this.delTerminal(index)}\r\n                        name={index}>\r\n                        {t}\r\n                      </Tag>)}\r\n                  </Col>\r\n                </Row>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Card\r\n            className=\"text-left\"\r\n            title={<b>Productions</b>}\r\n            extra={\r\n              <Button\r\n                type=\"primary\"\r\n                onClick={this.createNewProduction}\r\n              >\r\n                Add production\r\n              </Button>\r\n            }\r\n          >\r\n            {this.state.productionsList.map((production, index) =>\r\n              <Card\r\n                key={index}\r\n                className=\"production-card text-left\"\r\n                title={\"Production \" + (index + 1)}\r\n                extra={\r\n                  <Fragment>\r\n                    <Button\r\n                      type=\"primary\"\r\n                      onClick={() => this.createNewTerminalProduction(index)}>\r\n                      Add sentence\r\n                      </Button>\r\n                    <Button\r\n                      type=\"danger\"\r\n                      onClick={() => this.delProduction(index)}>\r\n                      Remove Production\r\n                      </Button>\r\n                  </Fragment>\r\n                }\r\n              >\r\n                <Col md={8}>\r\n                  <Select\r\n                    showSearch\r\n                    className=\"select-non-terminal\"\r\n                    placeholder=\"Select a non-terminal\"\r\n                    optionFilterProp=\"children\"\r\n                    value={this.state.productionsList[index].nonTerminal}\r\n                    onSelect={this.setNonTerminalProduction}\r\n                    filterOption={(input, option) => option.props.children.toUpperCase().indexOf(input.toUpperCase()) >= 0}\r\n                  >\r\n                    {this.state.nonTerminalList.map((nt, indexNonterminal) =>\r\n                      <Option\r\n                        value={nt}\r\n                        row={index}\r\n                        key={indexNonterminal}\r\n                      >\r\n                        {nt}\r\n                      </Option>\r\n                    )}\r\n                  </Select>\r\n                </Col>\r\n                <Col md={2} className=\"text-center\">\r\n                  <Icon type=\"arrow-right\" style={{ fontSize: 20, marginTop: 5 }} />\r\n                </Col>\r\n                <Col md={12}>\r\n                  {this.state.productionsList[index].terminalsList.map((terminal, indexTerminal) =>\r\n                    <Row key={indexTerminal}>\r\n                      <Col md={18}>\r\n                        <Input\r\n                          key={indexTerminal}\r\n                          value={this.state.productionsList[index].terminalsList[indexTerminal]}\r\n                          onChange={e => this.onSentenceChange(e, index, indexTerminal)}\r\n                          placeholder=\"Sentence\"\r\n                        />\r\n                      </Col>\r\n                      <Col md={6}>\r\n                        <Button\r\n                          type=\"danger\"\r\n                          onClick={() => this.delSentence(index, indexTerminal)}>\r\n                          Del sentence\r\n                          </Button>\r\n                      </Col>\r\n                    </Row>\r\n                  )}\r\n                </Col>\r\n              </Card>\r\n            )}\r\n          </Card>\r\n        </FormItem>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst GrammarForm = Form.create()(InputForm)\r\nexport default GrammarForm;","import React, { Component, Fragment } from 'react';\r\nimport { Card } from 'antd';\r\n\r\nexport default class GlcGrAnalyzer extends Component {\r\n\r\n  analyze = (productionsList) => {\r\n    let isRegularGrammar = false;\r\n    let isContexFreeGrammar = false;\r\n    \r\n\t\tproductionsList && productionsList.forEach(\r\n\t\t\t({ nonTerminal, terminalsList }) => {\r\n\t\t\t\tif (nonTerminal && terminalsList) {\r\n\r\n          terminalsList.forEach((terminal) => {\r\n            if ((/^[a-z]?[A-Z]?$/.test(terminal) && !/^[A-Z]?$/.test(terminal)) || terminal === '') {\r\n              if (!isContexFreeGrammar) {\r\n                isRegularGrammar = true;\r\n              }\r\n            } else {\r\n              isContexFreeGrammar = true;\r\n              isRegularGrammar = false;\r\n            }\r\n          });\r\n\t\t\t\t}\r\n\t\t\t}\r\n    );\r\n\r\n    if (isRegularGrammar) return 'Regular grammar'\r\n    if (isContexFreeGrammar) return 'Contex free grammar'\r\n    return 'Unrestricted Grammar'\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst cardStyle = {\r\n\t\t\ttextAlign: 'center',\r\n\t\t};\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<Card style={cardStyle}>\r\n\t\t\t\t\t<h1>{this.analyze(this.props.productionsList)}</h1>\r\n\t\t\t\t</Card>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n}","import React, { Component, Fragment } from 'react';\r\nimport { Card } from 'antd';\r\n\r\nexport default class Productions extends Component {\r\n\r\n\tformatProductionList = (productionsList) => {\r\n\t\tconst productionStyle = {\r\n\t\t\tmarginLeft: '10px',\r\n\t\t};\r\n\r\n\t\treturn productionsList && productionsList.map(\r\n\t\t\t({ nonTerminal, terminalsList }, index) => {\r\n\t\t\t\tif (nonTerminal) {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<span key={index} style={productionStyle}>\r\n\t\t\t\t\t\t\t{nonTerminal} = {terminalsList.map((terminalList, indexTerminal) => \r\n\t\t\t\t\t\t\t\t(terminalList === '' ? 'Σ' : terminalList) + (indexTerminal === terminalsList.length-1 ? ''  : ' | ')\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\treturn '';\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst cardStyle = {\r\n\t\t\ttextAlign: 'left',\r\n\t\t};\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<Card style={cardStyle} title={<b>Generated productions</b>}>\r\n\t\t\t\t\tP = {'{'}\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t{this.formatProductionList(this.props.productionsList)}\r\n\t\t\t\t\t{' }'}\r\n\t\t\t\t</Card>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n}","import React, { Component, Fragment } from 'react';\r\nimport { Card } from 'antd';\r\n\r\nexport default class Grammar extends Component {\r\n\r\n\tformatGrammar = (productionsList) => {\r\n\t\tlet allNonTerminals = [];\r\n\t\tlet allTerminals = [];\r\n\r\n\t\tproductionsList.forEach(({ nonTerminal, terminalsList }) => {\r\n\t\t\tallNonTerminals.push(nonTerminal);\r\n\r\n\t\t\tterminalsList.forEach((terminal) => {\r\n\t\t\t\tterminal.length > 0 && terminal.split('').forEach((terminalSplitted) => {\r\n\t\t\t\t\tif (terminalSplitted === terminalSplitted.toLowerCase()) {\r\n\t\t\t\t\t\tallTerminals.push(terminalSplitted);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\tallTerminals = [ ...new Set(allTerminals) ];\r\n\r\n\t\tif (allTerminals.length > 0 && allNonTerminals.length > 0) {\r\n\t\t\treturn `{${allNonTerminals.join(', ')}}, {${allTerminals.join(', ')}}, P, ${allNonTerminals[0]}`;\r\n\t\t}\r\n\t\treturn '';\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst cardStyle = {\r\n\t\t\ttextAlign: 'left',\r\n\t\t};\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<Card style={cardStyle} title={<b>Generated grammar</b>}>\r\n\t\t\t\t\tG = {'('}\r\n\t\t\t\t\t{this.formatGrammar(this.props.productionsList)}\r\n\t\t\t\t\t{')'}\r\n\t\t\t\t</Card>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n}","\r\nexport const isTerminal = (symbol) => {\r\n\r\n    try {\r\n        return !/[A-Z]/g.test(symbol);\r\n    } catch (e) {\r\n        setTimeout(function () {\r\n            return !/[A-Z]/g.test(symbol);\r\n        }.bind(this), 25);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const getAllNonTerminalsFromG = (g) => {\r\n    const terminals = [];\r\n    for (const key in g) {\r\n        const productions = g[key];\r\n        productions.forEach((production) => {\r\n            // console.log(production);\r\n            production.forEach((symbol) => {\r\n                if (isTerminal(symbol)) {\r\n                    if (terminals.indexOf(symbol) === -1) {\r\n                        terminals.push(symbol);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    return terminals;\r\n}\r\n","import _ from 'underscore';\r\nimport { isTerminal } from '../utils';\r\n\r\nconst _getFirst = (g, prod, counter) => {\r\n    if (counter === undefined) {\r\n        counter = 0;\r\n    } else {\r\n        counter++;\r\n    }\r\n    if (counter > 1000) {\r\n        return [];\r\n    }\r\n    for (const symbol of prod) {\r\n        if (isTerminal(symbol)) {\r\n            return symbol;\r\n        }\r\n        else {\r\n            const firsts = [];\r\n            for (const productions of g[symbol]) {\r\n                firsts.push(_getFirst(g, productions, counter));\r\n            }\r\n            return firsts;\r\n        }\r\n    }\r\n}\r\n\r\nexport const getFirstsFromG = (g) => {\r\n    const firsts = {};\r\n    for (const key in g) {\r\n        const productions = g[key];\r\n\r\n        let currFirsts = [];\r\n        productions.forEach((prod) => {\r\n            const first = _getFirst(g, prod);\r\n            if (first instanceof Array) {\r\n                const firstFlatten = _.flatten(first);\r\n                currFirsts = currFirsts.concat(firstFlatten);\r\n\r\n            }\r\n            else {\r\n                currFirsts.push(first);\r\n            }\r\n        });\r\n        firsts[key] = _.uniq(currFirsts);\r\n    }\r\n    return firsts;\r\n}\r\n","\r\nexport const newFormat = (oldGrammar, terminalsListInput, nonTerminalListInput) => {\r\n    const newGrammar = {};\r\n\r\n    console.log(oldGrammar, terminalsListInput, nonTerminalListInput);\r\n\r\n    let loop = 0;\r\n    oldGrammar.forEach(({ nonTerminal, terminalsList }) => {\r\n        if (!newGrammar[nonTerminal]) {\r\n            newGrammar[nonTerminal] = [];\r\n        }\r\n        console.log(++loop);\r\n        let list = [];\r\n        terminalsList.forEach((terminals) => {\r\n            console.log(nonTerminal, terminals);\r\n\r\n            if (terminalsListInput.includes(terminals)) {\r\n                \r\n                list.push(terminals);\r\n            }else if (nonTerminalListInput.includes(terminals)) {\r\n                list.push(terminals);\r\n            } else {\r\n                list.push(terminals.split(\"\"));\r\n            }\r\n        });\r\n\r\n\r\n\r\n        newGrammar[nonTerminal].push(list);\r\n\r\n\r\n    });\r\n    console.log(newGrammar);\r\n    return newGrammar;\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Card } from 'antd';\r\n\r\nimport { getFirstsFromG } from '../../services/first';\r\nimport { newFormat } from '../../services/convertToNewFormat';\r\n\r\nexport default class First extends Component {\r\n\r\n    formatFirst = (all) => {\r\n        let productionsList = all.productions;\r\n        let terminalList = all.terminalList;\r\n        let nonTerminalList = all.nonTerminalList;\r\n\r\n        if (productionsList !== undefined && undefined !== terminalList) {\r\n\r\n            const newGramar = newFormat(productionsList, terminalList, nonTerminalList);\r\n            const firstList = getFirstsFromG(newGramar);\r\n            return firstList;\r\n        }\r\n\r\n        return {};\r\n    };\r\n\r\n    render() {\r\n        const cardStyle = {\r\n            textAlign: 'left',\r\n        };\r\n        return (\r\n            <Fragment>\r\n                <Card style={cardStyle} title={<b>Firsts</b>}>\r\n                    <div className=\"loop-container\">\r\n                        {\r\n                            Object.entries(this.formatFirst(this.props.all)).map(([key, value], index) => (\r\n                                <div key={key+index} id={index+key}>\r\n                                    {key} : {JSON.stringify(value)}\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </Card>\r\n            </Fragment>\r\n        );\r\n    }\r\n}","// import { d7 } from '../data-sets';\r\nimport { isTerminal } from '../utils';\r\nimport { getFirstsFromG } from './first';\r\n\r\nconst follow = (terminal, grammar, firsts, follows) => {\r\n\r\n    let resultado = [];\r\n\r\n    for (const prod in grammar) {\r\n        // if (prod !== terminal) {\r\n        // eslint-disable-next-line no-loop-func\r\n\r\n        grammar[prod].forEach((sentencas) => {\r\n            let entrou = false;\r\n            let location = sentencas.indexOf(terminal);\r\n\r\n            if (terminal === 'X') {\r\n                console.log(1);\r\n            }\r\n\r\n            if (location !== -1) {\r\n\r\n                for (let i = location + 1; i < sentencas.length; i++) {\r\n                    if (isTerminal(sentencas[i])) {\r\n                        entrou = true;\r\n                        resultado.push(sentencas[i]);\r\n                    }\r\n                    break;\r\n\r\n                }\r\n                if (entrou === false) {\r\n                    for (let i = location - 1; i >= 0; i--) {\r\n                        if (isTerminal(sentencas[i]) && sentencas[location + 1] !== undefined) {\r\n                            entrou = true;\r\n                            resultado.push(sentencas[i]);\r\n                        }\r\n                        break;\r\n\r\n                    }\r\n\r\n                }\r\n                if (entrou === false) {\r\n                    for (let i = location; i >= 0; i--) {\r\n                        if (!isTerminal(sentencas[i]) && sentencas[i + 2] === undefined) {\r\n                            entrou = true;\r\n                            if (follows[prod] !== undefined) {\r\n                                resultado.push(...follows[prod]);\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    }\r\n\r\n                }\r\n                if (entrou === false) {\r\n                    for (let i = location; i < sentencas.length; i++) {\r\n                        if (!isTerminal(sentencas[i])) {\r\n                            entrou = true;\r\n                            resultado.push(...firsts[prod]);\r\n                        }\r\n                        break;\r\n\r\n                    }\r\n                }\r\n                // } else if (prod == terminal && sentencas.length === 1) {\r\n                //     if(isTerminal(sentencas[0])) {\r\n                //         resultado.push(...sentencas[0]);\r\n                //     }\r\n            }\r\n\r\n\r\n        });\r\n        // }\r\n    }\r\n    return resultado.filter(function (item) {\r\n        return item !== 'empty'\r\n    })\r\n}\r\n\r\nconst getFollows = (grammar, firsts) => {\r\n\r\n    let first = true;\r\n\r\n    let follows = {\r\n\r\n    }\r\n\r\n    for (const prod in grammar) {\r\n        if (!follows[prod]) {\r\n            follows[prod] = [];\r\n        }\r\n\r\n        follows[prod] = follow(prod, grammar, firsts, follows);\r\n\r\n        if (first === true) {\r\n            follows[prod].push('$');\r\n            first = false;\r\n        }\r\n    }\r\n\r\n    return follows;\r\n}\r\n\r\nexport const getFollowsFromG = (g) => {\r\n    const firsts = getFirstsFromG(g);\r\n    return getFollows(g, firsts)\r\n}","import React, { Component, Fragment } from 'react';\r\nimport { Card } from 'antd';\r\n\r\nimport { getFollowsFromG } from '../../services/follow';\r\nimport { newFormat } from '../../services/convertToNewFormat';\r\n\r\nexport default class Follow extends Component {\r\n\r\n    formatFollow = (all) => {\r\n        let productionsList = all.productions;\r\n        let terminalList = all.terminalList;\r\n        let nonTerminalList = all.nonTerminalList;\r\n\r\n        if (productionsList !== undefined && undefined !== terminalList) {\r\n\r\n            const newGramar = newFormat(productionsList, terminalList, nonTerminalList);\r\n            const followList = getFollowsFromG(newGramar);\r\n            return followList;\r\n        }\r\n\r\n        return {};\r\n    };\r\n\r\n    render() {\r\n        const cardStyle = {\r\n            textAlign: 'left',\r\n        };\r\n        return (\r\n            <Fragment>\r\n                <Card style={cardStyle} title={<b>Follows</b>}>\r\n                    <div className=\"loop-follow\">\r\n                        {\r\n                            Object.entries(this.formatFollow(this.props.all)).map(([key, value], index) => (\r\n                                <div key={key+index} id={index+key}>\r\n                                    {key} : {JSON.stringify(value)}\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </Card>\r\n            </Fragment>\r\n        );\r\n    }\r\n}","import { isTerminal, getAllNonTerminalsFromG } from '../utils';\r\nimport { getFirstsFromG } from './first';\r\n\r\nconst _initPredictiveTable = (g, mapNonMatchedTerminals) => {\r\n    const terminals = getAllNonTerminalsFromG(g);\r\n    const predictiveTable = {};\r\n    for (const key in g) {\r\n        predictiveTable[key] = {};\r\n        if (mapNonMatchedTerminals) {\r\n            terminals.forEach((t) => {\r\n                predictiveTable[key][t === 'empty' ? '$' : t] = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    return predictiveTable;\r\n};\r\n\r\nexport const generateTabularPredictiveTable = (\r\n    g, \r\n    firsts = null, \r\n    follows = null, \r\n    mapNonMatchedTerminals = false\r\n) => {\r\n    const predictiveTable = _initPredictiveTable(g, mapNonMatchedTerminals);\r\n    if (!firsts) {\r\n        firsts = getFirstsFromG(g);\r\n    }\r\n    // @TODO: Chamar função para obter os follows\r\n    // const follows = getFollowsFromG(g);\r\n    // const follows = {};\r\n\r\n    for (const key in g) {\r\n        const productions = g[key];\r\n\r\n        const row = predictiveTable[key]\r\n        productions.forEach((production) => {\r\n            const firstSymbol = production[0];\r\n            if (isTerminal(firstSymbol) && firstSymbol !== 'empty') {\r\n                row[firstSymbol] = production;\r\n            }\r\n            else {\r\n                if (firstSymbol !== 'empty') {\r\n                    const symbolFirsts = firsts[firstSymbol];\r\n                    symbolFirsts.forEach((first) => {\r\n                        if (first !== 'empty') {\r\n                            row[first] = production;\r\n                        }\r\n                        else {\r\n                            const symbolFollows = follows[firstSymbol];\r\n                            symbolFollows.forEach((follow) => {\r\n                                row[follow === 'empty' ? '$' : follow] = production;\r\n                            });\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    const symbolFollows = follows[key];\r\n                    symbolFollows.forEach((follow) => {\r\n                        row[follow === 'empty' ? '$' : follow] = production;\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return predictiveTable;\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Card, Table, Button } from 'antd';\r\n\r\nimport { getFirstsFromG } from '../../services/first';\r\nimport { getFollowsFromG } from '../../services/follow';\r\nimport { generateTabularPredictiveTable } from '../../services/tabular-predictive-table';\r\nimport { newFormat } from '../../services/convertToNewFormat';\r\n\r\nexport default class PredictiveTable extends Component {\r\n\r\n    state = {\r\n        columns: [],\r\n        dataSource: []\r\n    }\r\n\r\n    updateState = () => {\r\n        this.formatPredictiveTable(this.props.all);\r\n    }\r\n\r\n    formatPredictiveTable = (all) => {\r\n        let productionsList = all.productions;\r\n        let terminalList = all.terminalList;\r\n        let nonTerminalList = all.nonTerminalList;\r\n\r\n        const columns = [];\r\n        const dataSource = [];\r\n\r\n        if (productionsList !== undefined && undefined !== terminalList) {\r\n\r\n            const newGramar = newFormat(productionsList, terminalList, nonTerminalList);\r\n            const followList = getFollowsFromG(newGramar);\r\n            const firstList = getFirstsFromG(newGramar);\r\n\r\n            // console.log('newGramar:', newGramar, 'followList:', followList, 'firstList:', firstList);\r\n\r\n            const tabularPredictiveTable = generateTabularPredictiveTable(newGramar, firstList, followList);\r\n            // console.log(tabularPredictiveTable);\r\n\r\n            columns.push({\r\n                title: 'Prod',\r\n                dataIndex: 'Prod',\r\n                key: 'Prod',\r\n            });\r\n            terminalList.forEach((item) => {\r\n                columns.push({\r\n                    title: item,\r\n                    dataIndex: item,\r\n                    key: item,\r\n                })\r\n            })\r\n\r\n            for (var property in tabularPredictiveTable) {\r\n                let linha = {};\r\n                linha['Prod'] = property;\r\n                // eslint-disable-next-line no-loop-func\r\n                terminalList.forEach((item) => {\r\n                    if (tabularPredictiveTable[property][item] !== undefined) {\r\n                        linha[item] = property + \" -> \" + tabularPredictiveTable[property][item].join(\"\");\r\n                    }\r\n                });\r\n                dataSource.push(linha);\r\n            }\r\n\r\n            this.setState({\r\n                columns,\r\n                dataSource\r\n            })\r\n\r\n\r\n            return '';\r\n        }\r\n\r\n        return '';\r\n    };\r\n\r\n    render() {\r\n        const cardStyle = {\r\n            textAlign: 'left',\r\n        };\r\n        return (\r\n            <Fragment>\r\n                <Card style={cardStyle} title={<b>Predictive Table</b>}>\r\n                    <Button onClick={this.updateState} type=\"primary\">Update</Button>\r\n                    <Table dataSource={this.state.dataSource} columns={this.state.columns} />\r\n                </Card>\r\n            </Fragment>\r\n        );\r\n    }\r\n}","// import { arthur_d1 } from '../data-sets';\r\n\r\n\r\nconst escreverTabelafinal = (tabelaFinal) => {\r\n\r\n    let tamanho = tabelaFinal.pilha.length;\r\n\r\n    console.log(\"pilha \\t\\t\", \"entrada \\t\\t\");\r\n\r\n    for (let index = 0; index < tamanho; index++) {\r\n        console.log(\"Linha: \", index);\r\n        console.log(\"Pilha: \", JSON.stringify(tabelaFinal.pilha[index]));\r\n        console.log(\"Entrada: \", JSON.stringify(tabelaFinal.entrada[index]));\r\n        console.log(\"Saída: \", JSON.stringify(tabelaFinal.saida[index]));\r\n        console.log(\"\\n\");\r\n\r\n    }\r\n\r\n    \r\n    let teste = tabelaFinal.entrada[tamanho-1].join() + tabelaFinal.pilha[tamanho-1].join();\r\n    if (teste === '$$') {\r\n        console.log(\"Aceita\");\r\n        alert(\"Aceita\");\r\n    } else {\r\n        console.log(\"Rejeita\");\r\n        alert(\"Rejeita\");\r\n    }\r\n\r\n}\r\n\r\nconst verificarSentenca = (pilha, entrada, tabelaPreditivaTabular) => {\r\n    let tabelaFinal = {\r\n        pilha: [],\r\n        entrada: [],\r\n        saida: []\r\n    }\r\n\r\n    tabelaFinal.pilha.push([...pilha]);\r\n    tabelaFinal.entrada.push([...entrada]);\r\n    tabelaFinal.saida.push([]);\r\n\r\n    let encontrouNaTabela = true;\r\n\r\n    while (encontrouNaTabela) {\r\n        encontrouNaTabela = false;\r\n\r\n        let letraEntrada = entrada.shift();\r\n        let topoPilha = pilha.pop();\r\n\r\n        if (letraEntrada === topoPilha && letraEntrada !== '$') {\r\n            tabelaFinal.pilha.push([...pilha]);\r\n            tabelaFinal.entrada.push([...entrada]);\r\n            tabelaFinal.saida.push([]);\r\n            encontrouNaTabela = true;\r\n        } else {\r\n            // Percore as nao terminais\r\n            for (const naoTerminalTabela in tabelaPreditivaTabular) {\r\n                if (topoPilha === naoTerminalTabela) {\r\n                    for (const letraTabela in tabelaPreditivaTabular[topoPilha]) {\r\n                        if (letraEntrada === letraTabela) {\r\n                            entrada.unshift(letraEntrada);\r\n                            let tabelaPreditivaTabularTmp = [...tabelaPreditivaTabular[topoPilha][letraEntrada]];\r\n                            pilha.push(...tabelaPreditivaTabularTmp.reverse());\r\n                            pilha = pilha.filter(e => e !== 'empty');\r\n                            tabelaFinal.pilha.push([...pilha]);\r\n                            tabelaFinal.entrada.push([...entrada]);\r\n\r\n                            let sentenca = {};\r\n                            sentenca[topoPilha] = [...tabelaPreditivaTabularTmp];\r\n\r\n                            tabelaFinal.saida.push(sentenca);\r\n                            encontrouNaTabela = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    escreverTabelafinal(tabelaFinal);\r\n    return tabelaFinal;\r\n}\r\n\r\nexport const testSentenceInPredictiveTable = (\r\n    initSymbol,\r\n    predictiveTable,\r\n    sentence\r\n) => {\r\n    if (sentence && typeof sentence !== 'array') {\r\n        sentence = sentence.split(' ');\r\n    }\r\n    return verificarSentenca([\"$\", initSymbol], sentence, predictiveTable);\r\n}\r\n\r\nexport const testSentenceInPredictiveTableData = (\r\n    initSymbol,\r\n    predictiveTable,\r\n    sentence\r\n) => {\r\n    if (sentence && typeof sentence !== 'array') {\r\n        sentence = sentence.split(' ');\r\n    }\r\n    console.log([\"$\", initSymbol], sentence, predictiveTable);\r\n    return verificarSentenca([\"$\", initSymbol], sentence, predictiveTable);\r\n}\r\n// verificarSentenca([\"$\", \"E\"], [\"a\", \"+\", \"a\", \"+\", \"a\", \"$\"], arthur_d1);","import React, { Component, Fragment } from 'react';\r\nimport { Card, Table, Button, Input } from 'antd';\r\n\r\nimport { getFirstsFromG } from '../../services/first';\r\nimport { getFollowsFromG } from '../../services/follow';\r\nimport { generateTabularPredictiveTable } from '../../services/tabular-predictive-table';\r\nimport { testSentenceInPredictiveTableData } from '../../services/verificador-sentenca';\r\nimport { newFormat } from '../../services/convertToNewFormat';\r\n\r\nexport default class VerificadorSentenca2 extends Component {\r\n\r\n    state = {\r\n        columns: [],\r\n        dataSource: [],\r\n        initSymbol: 'E',\r\n        sentence: 'a + a + a $',\r\n    }\r\n\r\n    handleChangeInitSymbol = (event) => {\r\n        this.setState({ initSymbol: event.target.value });\r\n    }\r\n\r\n    handleChangeSentence = (event) => {\r\n        this.setState({ sentence: event.target.value });\r\n    }\r\n\r\n    updateState = () => {\r\n        this.formatverificadorSentenca(this.props.all);\r\n    }\r\n\r\n    formatverificadorSentenca = (all) => {\r\n        let productionsList = all.productions;\r\n        let terminalList = all.terminalList;\r\n        let nonTerminalList = all.nonTerminalList;\r\n\r\n        const dataSource = [];\r\n\r\n        if (productionsList !== undefined && undefined !== terminalList) {\r\n\r\n            const newGramar = newFormat(productionsList, terminalList, nonTerminalList);\r\n            const followList = getFollowsFromG(newGramar);\r\n            const firstList = getFirstsFromG(newGramar);\r\n\r\n            // console.log('newGramar:', newGramar, 'followList:', followList, 'firstList:', firstList);\r\n\r\n            const tabularPredictiveTable = generateTabularPredictiveTable(newGramar, firstList, followList);\r\n            // console.log(tabularPredictiveTable);\r\n\r\n            const tabelaFinal = testSentenceInPredictiveTableData(this.state.initSymbol, tabularPredictiveTable, this.state.sentence);\r\n            console.log(tabelaFinal);\r\n\r\n            const columns = [\r\n                {\r\n                    title: 'Linha',\r\n                    dataIndex: 'linha',\r\n                    key: 'linha',\r\n                },\r\n                {\r\n                    title: 'Pilha',\r\n                    dataIndex: 'pilha',\r\n                    key: 'pilha',\r\n                },\r\n                {\r\n                    title: 'Entrada',\r\n                    dataIndex: 'entrada',\r\n                    key: 'entrada',\r\n                },\r\n                {\r\n                    title: 'Saída',\r\n                    dataIndex: 'saida',\r\n                    key: 'saida',\r\n                },\r\n            ];\r\n\r\n            let tamanho = tabelaFinal.pilha.length;\r\n            for (let index = 0; index < tamanho; index++) {\r\n                console.log(\"Linha: \", index);\r\n                console.log(\"Pilha: \", JSON.stringify(tabelaFinal.pilha[index]));\r\n                console.log(\"Entrada: \", JSON.stringify(tabelaFinal.entrada[index]));\r\n                console.log(\"Saída: \", JSON.stringify(tabelaFinal.saida[index]));\r\n                console.log(\"\\n\");\r\n                dataSource.push({\r\n                    linha: index,\r\n                    pilha: JSON.stringify(tabelaFinal.pilha[index]),\r\n                    entrada: JSON.stringify(tabelaFinal.entrada[index]),\r\n                    saida: JSON.stringify(tabelaFinal.saida[index])\r\n                });\r\n\r\n            }\r\n\r\n            this.setState({\r\n                columns,\r\n                dataSource\r\n            })\r\n\r\n            return '';\r\n        }\r\n\r\n        return '';\r\n    };\r\n\r\n    render() {\r\n        const cardStyle = {\r\n            textAlign: 'left',\r\n        };\r\n        return (\r\n            <Fragment>\r\n                <Card style={cardStyle} title={<b>Verificador Sentenca</b>}>\r\n                    <label>Tem que separar por espaço:</label>\r\n                    <hr></hr>\r\n                    <label>initSymbol</label>\r\n                    <Input value={this.state.initSymbol} onChange={this.handleChangeInitSymbol} placeholder=\"initSymbol\" />\r\n                    <label>sentence</label>\r\n                    <Input value={this.state.sentence} onChange={this.handleChangeSentence} placeholder=\"sentence\" />\r\n                    <Button onClick={this.updateState} type=\"primary\">Update</Button>\r\n                    <Table dataSource={this.state.dataSource} columns={this.state.columns} />\r\n                </Card>\r\n            </Fragment>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Row, Col } from 'antd'\r\n\r\nimport GrammarForm from './modules/grammar-form/GrammarForm'\r\n\r\nimport GlcGrAnalyzer from './modules/helpers/glc-gr-analyzer/GlcGrAnalyzer'\r\nimport Productions from './modules/helpers/productions/Productions'\r\nimport Grammar from './modules/helpers/grammar/Grammar'\r\nimport First from './modules/first/First';\r\nimport Follow from './modules/follow/Follow';\r\nimport PredictiveTable from './modules/predictiveTable/PredictiveTable';\r\nimport VerificadorSentenca2 from './modules/verificador-sentenca/VerificadorSentenca2'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    productions: [],\r\n    terminalList: [],\r\n    nonTerminalList: [],\r\n    all: {}\r\n  }\r\n\r\n  handleProductionsChange = (productions, terminalList, nonTerminalList) => {\r\n    this.setState({ productions });\r\n    this.setState({ terminalList });\r\n    this.setState({ nonTerminalList })\r\n    const all = {\r\n      productions,\r\n      terminalList,\r\n      nonTerminalList\r\n    }\r\n    this.setState({ all })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Row style={{ background: '#ECECEC', padding: '30px' }} >\r\n          <Col md={16}>\r\n            <GrammarForm handleProductionsChange={this.handleProductionsChange} />\r\n          </Col>\r\n          <Col md={8}>\r\n            <Row>\r\n              <Col md={24}>\r\n                <GlcGrAnalyzer productionsList={this.state.productions} />\r\n              </Col>\r\n              <Col md={24}>\r\n                <Productions productionsList={this.state.productions} />\r\n              </Col>\r\n              <Col md={24}>\r\n                <Grammar productionsList={this.state.productions} />\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          <Col md={8}>\r\n            <First all={this.state.all}></First>\r\n          </Col>\r\n          <Col md={8}>\r\n            <Follow all={this.state.all}></Follow>\r\n          </Col>\r\n          <Col md={24}>\r\n            <PredictiveTable all={this.state.all}></PredictiveTable>\r\n          </Col>\r\n          <Col md={24}>\r\n            <VerificadorSentenca2 all={this.state.all}></VerificadorSentenca2>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'antd/dist/antd.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}